define(["angular","lodash","jquery","cjt/util/locale","cjt/io/api","cjt/io/uapi-request","cjt/io/uapi","cjt/util/parse","cjt/util/flatObject","cjt/services/APIService"],function(angular,_,$,LOCALE,API,APIREQUEST,APIDRIVER,PARSER,FLAT){var app=angular.module("App");var lastRequest_jqXHR;app.factory("userService",["$q","APIService","emailDaemonInfo","ftpDaemonInfo","webdiskDaemonInfo","features","defaultInfo",function($q,APIService,emailDaemonInfo,ftpDaemonInfo,webdiskDaemonInfo,features,defaultInfo){var modifiers={email:{supports:{serviceRunning:emailDaemonInfo.enabled,allowed:features.email,createable:features.email&&emailDaemonInfo.enabled,editable:features.email,deletable:features.email,viewable:true},name:"email"},ftp:{supports:{serviceRunning:ftpDaemonInfo.enabled,allowed:features.ftp,createable:features.ftp&&ftpDaemonInfo.enabled,editable:features.ftp,deletable:features.ftp,viewable:true},name:"ftp"},webdisk:{supports:{serviceRunning:webdiskDaemonInfo.enabled,allowed:features.webdisk,createable:features.webdisk&&webdiskDaemonInfo.enabled,editable:features.webdisk,deletable:features.webdisk,viewable:true},name:"webdisk"}};function decorateUser(user){user.ui={};user.typeLabel=typeLabels[user.type]}var typeLabels={service:LOCALE.maketext("Service Account"),hypothetical:LOCALE.maketext("Hypothetical Subaccount"),sub:LOCALE.maketext("Subaccount"),cpanel:LOCALE.maketext("cPanel Account")};var serviceLabels={ftp:LOCALE.maketext("FTP"),email:LOCALE.maketext("Email"),webdisk:LOCALE.maketext("Web Disk")};function buildServiceSearchField(user){var search=[];if(user.services.email.enabled){search.push("email")}if(user.services.ftp.enabled){search.push("ftp")}if(user.services.webdisk.enabled){search.push("webdisk webdav")}return search.join(" ")}function _generateGuid(user){if(user.service){return user.full_username+":"+user.service}else{return user.full_username+":"+user.type}}function adjustService(service,modifiers){service.enabled=PARSER.parsePerlBoolean(service.enabled);service.isNew=!service.enabled;_.extend(service,_.cloneDeep(modifiers));if(angular.isString(service.quota)){service.quota=PARSER.parseInteger(service.quota)}if(!angular.isUndefined(service.enabledigest)){service.enabledigest=PARSER.parsePerlBoolean(service.enabledigest)}}function adjustUser(user){var services=_.keys(user.services);_.each(services,function(serviceName){adjustService(user.services[serviceName],modifiers[serviceName])});user.can_delete=PARSER.parsePerlBoolean(user.can_delete);user.can_set_quota=PARSER.parsePerlBoolean(user.can_set_quota);user.can_set_password=PARSER.parsePerlBoolean(user.can_set_password);user.special=PARSER.parsePerlBoolean(user.special);user.synced_password=PARSER.parsePerlBoolean(user.synced_password);user.sub_account_exists=PARSER.parsePerlBoolean(user.sub_account_exists);user.has_siblings=PARSER.parsePerlBoolean(user.has_siblings);user.dismissed=PARSER.parsePerlBoolean(user.dismissed);user.has_invite=PARSER.parsePerlBoolean(user.has_invite);user.has_expired_invite=PARSER.parsePerlBoolean(user.has_expired_invite);user.typeLabel=typeLabels[user.type];if(user.type==="hypothetical"||user.type==="sub"){user.candidate_issues_count=0;user.serviceSearch=[];if(user.dismissed_merge_candidates){user.dismissed_merge_candidates.forEach(function(candidate){angular.forEach(candidate.services,function(service,serviceName){adjustService(service,modifiers[serviceName]);if(service.enabled){candidate.service=serviceName}})})}for(var j=0,jl=user.merge_candidates.length;j<jl;j++){var candidate=user.merge_candidates[j];candidate.can_delete=PARSER.parsePerlBoolean(candidate.can_delete);candidate.can_set_quota=PARSER.parsePerlBoolean(candidate.can_set_quota);candidate.can_set_password=PARSER.parsePerlBoolean(candidate.can_set_password);candidate.sub_account_exists=PARSER.parsePerlBoolean(candidate.sub_account_exists);candidate.has_siblings=PARSER.parsePerlBoolean(candidate.has_siblings);candidate.dismissed=PARSER.parsePerlBoolean(candidate.dismissed);for(var serviceName in candidate.services){if(candidate.services.hasOwnProperty(serviceName)){adjustService(candidate.services[serviceName],modifiers[serviceName]);if(candidate.services[serviceName].enabled){user.services[serviceName].enabledInCandidate=true;candidate.service=serviceName}}}if(candidate.issues.length>0){user.candidate_issues_count++}candidate.typeLabel=typeLabels[candidate.type];candidate.serviceLabel=serviceLabels[candidate.service];candidate.serviceSearch=buildServiceSearchField(candidate);user.serviceSearch.push(candidate.serviceSearch);candidate.guid=_generateGuid(candidate)}}else if(user.type==="service"){services.some(function(service){if(user.services[service].enabled){user.service=service;return true}})}if(user.guid===null){user.guid=_generateGuid(user)}if(user.serviceSearch){user.serviceSearch.push(buildServiceSearchField(user));user.serviceSearch=user.serviceSearch.join(" ")}else{user.serviceSearch=buildServiceSearchField(user)}decorateUser(user);if(user.merge_candidates){user.merge_candidates.forEach(decorateUser)}return user}function _extendConsolidatedServices(destination,source,isDismissed){var services=Object.keys(source);services.some(function(service){if(source[service].enabled){destination[service]=source[service];destination[service].isCandidate=true;if(isDismissed){destination[service].isDismissed=true}return true}});return destination}function consolidateCandidateServices(user,includeDismissed){var consolidatedCandidateServices={};user.merge_candidates.forEach(function(candidate){_extendConsolidatedServices(consolidatedCandidateServices,candidate.services)});if(includeDismissed){user.dismissed_merge_candidates.forEach(function(candidate){_extendConsolidatedServices(consolidatedCandidateServices,candidate.services,true)})}return consolidatedCandidateServices}function convertResponseToList(response){var items=[];if(response.data){var data=response.data;for(var i=0,length=data.length;i<length;i++){var user=adjustUser(data[i]);items.push(user)}var totalItems=response.meta&&response.meta.paginate&&response.meta.paginate.is_paged?response.meta.paginate.total_records:data.length;return{items:items,totalItems:totalItems}}else{return{items:[],totalItems:0}}}var NOT_FOR_POST_USER=["can_delete","can_set_quota","can_set_password","candidate_issues_count","issues","serviceSearch","merge_candidates","special","synced_password","sub_account_exists","has_siblings","parent_type","dismissed","dismissed_merge_candidates","has_invite","has_expired_invite","name","isNew"];function cleanUserForPost(user){var tmp=JSON.parse(JSON.stringify(user));NOT_FOR_POST_USER.forEach(function(name){delete tmp[name]});var services=_.keys(tmp.services);_.each(services,function(service){if(tmp.services[service].isCandidate){delete tmp.services[service]}else{tmp.services[service].enabled=tmp.services[service].enabled?1:0;if(!angular.isUndefined(tmp.services[service].enabledigest)){tmp.services[service].enabledigest=tmp.services[service].enabledigest?1:0}delete tmp.services[service].supports}});return FLAT.flatten(tmp)}function _emptyUser(){return{username:"",domain:"",real_name:"",alternate_email:"",phone_number:"",avatar_url:"",services:{email:{name:modifiers.name,enabled:false,isNew:true,quota:defaultInfo.email.default_value,supports:modifiers.email.supports},ftp:{name:modifiers.name,enabled:false,isNew:true,quota:defaultInfo.ftp.default_value,homedir:"public_html/",supports:modifiers.ftp.supports},webdisk:{name:modifiers.name,enabled:false,isNew:true,homedir:"public_html/",perms:"rw",supports:modifiers.webdisk.supports,enabledigest:false}}}}function _backfillUser(user){var u=_emptyUser();$.extend(true,u,user);if(!u.services.ftp.enabled){u.services.ftp.homedir+=u.domain+"/"+u.username}if(!u.services.webdisk.enabled){u.services.webdisk.homedir+=u.domain+"/"+u.username}return u}var UserListService=function(){};UserListService.prototype=new APIService;angular.extend(UserListService.prototype,{emptyUser:_emptyUser,backfillUser:_backfillUser,fetchList:function(flat,meta){meta=meta||{};var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","list_users");apiCall.addArgument("flat",flat?1:0);if(meta.sortBy){meta.sortDirection=meta.sortDirection||"asc";apiCall.addSorting(meta.sortBy,meta.sortDirection,meta.sortType)}var deferred=this.deferred(apiCall,{transformAPISuccess:convertResponseToList});return deferred.promise},fetchUser:function(guid){var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","lookup_user");apiCall.addArgument("guid",guid);var deferred=this.deferred(apiCall,{transformAPISuccess:function(response){response.data=_backfillUser(adjustUser(response.data));response.data.candidate_services=consolidateCandidateServices(response.data,true);return response.data}});return deferred.promise},fetchService:function(type,full_username){var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","lookup_service_account");apiCall.addArgument("type",type);apiCall.addArgument("full_username",full_username);var deferred=this.deferred(apiCall,{transformAPISuccess:function(response){return _backfillUser(adjustUser(response.data))}});return deferred.promise},"delete":function(user){var apiCall;var promise;if("sub"===user.type){apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","delete_user");apiCall.addArgument("username",user.username);apiCall.addArgument("domain",user.domain);var deferred=this.deferred(apiCall,{transformAPISuccess:function(response){if(response.data){response.data=adjustUser(response.data)}return response}});promise=deferred.promise}else if("service"===user.type){if(user.services.email.enabled){apiCall=new APIREQUEST.Class;apiCall.initialize("Email","delete_pop");apiCall.addArgument("email",user.full_username);promise=this.deferred(apiCall).promise}else if(user.services.ftp.enabled){apiCall=new APIREQUEST.Class;apiCall.initialize("Ftp","delete_ftp");apiCall.addArgument("user",user.full_username);apiCall.addArgument("destroy",0);promise=this.deferred(apiCall).promise}else if(user.services.webdisk.enabled){apiCall=new APIREQUEST.Class;apiCall.initialize("WebDisk","delete_user");apiCall.addArgument("user",user.full_username);apiCall.addArgument("destroy",0);promise=this.deferred(apiCall).promise}else{promise=$q(function(resolve,reject){reject(LOCALE.maketext("The system could not determine the service type for the “[_1]” service account.",user.full_username))})}}else{promise=$q(function(resolve,reject){reject(LOCALE.maketext("The system could not delete the “[_1]” account. You cannot delete the “[_2]” account type.",user.full_username,user.type))})}return promise},linkAndDismiss:function(user,services){var dismissedServices=[];var linkedServices=[];angular.forEach(services||user.services,function(service,serviceName){if(!service.isCandidate){return}else if(service.willLink&&service.willDismiss){throw"Developer Error: You cannot link and dismiss the same service account."}else if(service.willLink){linkedServices.push(serviceName)}else if(service.willDismiss){dismissedServices.push(serviceName)}});var apiCall,promise;var promises=[];if(linkedServices.length){apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","merge_service_account");apiCall.addArgument("username",user.username);apiCall.addArgument("domain",user.domain);linkedServices.forEach(function(serviceName){apiCall.addArgument("services."+serviceName+".merge",1)});promise=this.deferred(apiCall,{transformAPISuccess:function(response){return adjustUser(response.data)},transformAPIFailure:function(response){return{error:response.error,call:"link"}}}).promise;promises.push(promise)}if(dismissedServices.length){apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","dismiss_merge");apiCall.addArgument("username",user.username);apiCall.addArgument("domain",user.domain);dismissedServices.forEach(function(serviceName){apiCall.addArgument("services."+serviceName+".dismiss",1)});promise=this.deferred(apiCall,{transformAPISuccess:function(response){return response.data},transformAPIFailure:function(response){return{error:response.error,call:"link"}}}).promise;promises.push(promise)}var self=this;return $q.all(promises).then(function(results){if(!results.length){return user}else{return self.fetchUser(user.guid).then(function(fetchedUser){fetchedUser.dismissed_services=dismissedServices;fetchedUser.linked_services=linkedServices;return fetchedUser})}}).catch(function(error){return $q(function(resolve,reject){self.fetchUser(user.guid).then(function(fetchedUser){error.user=fetchedUser;reject(error)})})})},create:function(user){var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","create_user");apiCall.addArgument("username",user.username);apiCall.addArgument("domain",user.domain);apiCall.addArgument("real_name",user.fullName);apiCall.addArgument("alternate_email",user.recoveryEmail);if(user.sendInvite){apiCall.addArgument("send_invite",1)}else{apiCall.addArgument("password",user.password)}if(features.email&&!user.services.email.isCandidate){apiCall.addArgument("services.email.enabled",user.services.email.enabled?1:0);apiCall.addArgument("services.email.quota",user.services.email.quota)}if(features.ftp&&!user.services.ftp.isCandidate){apiCall.addArgument("services.ftp.enabled",user.services.ftp.enabled?1:0);if(ftpDaemonInfo.supports.quota){apiCall.addArgument("services.ftp.quota",user.services.ftp.quota)}apiCall.addArgument("services.ftp.homedir",user.services.ftp.homedir)}if(features.webdisk&&!user.services.webdisk.isCandidate){apiCall.addArgument("services.webdisk.enabled",user.services.webdisk.enabled?1:0);apiCall.addArgument("services.webdisk.homedir",user.services.webdisk.homedir);apiCall.addArgument("services.webdisk.perms",user.services.webdisk.perms);apiCall.addArgument("services.webdisk.enabledigest",user.services.webdisk.enabledigest?1:0)}var self=this;return this.deferred(apiCall,{transformAPISuccess:function(response){return adjustUser(response.data)}}).promise.then(function(createResponse){return self.linkAndDismiss(createResponse,user.services)})},edit:function(user){var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","edit_user");var cleanUser=cleanUserForPost(user);for(var attribute in cleanUser){if(cleanUser.hasOwnProperty(attribute)){apiCall.addArgument(attribute,cleanUser[attribute])}}var deferred=this.deferred(apiCall,{transformAPISuccess:function(response){return adjustUser(response.data)}});return deferred.promise},editService:function(user,originalService){var apiCall,promise,promises=[];if(user.services.email.enabled){if(user.services.email.quota!==originalService.quota){apiCall=new APIREQUEST.Class;apiCall.initialize("Email","edit_pop_quota");apiCall.addArgument("email",user.username);apiCall.addArgument("domain",user.domain);apiCall.addArgument("quota",user.services.email.quota);promise=this.deferred(apiCall).promise;promises.push(promise)}if(user.password){apiCall=new APIREQUEST.Class;apiCall.initialize("Email","passwd_pop");apiCall.addArgument("email",user.username);apiCall.addArgument("domain",user.domain);apiCall.addArgument("password",user.password);promise=this.deferred(apiCall).promise;promises.push(promise)}}else if(user.services.ftp.enabled){if(user.services.ftp.quota!==originalService.quota){apiCall=new APIREQUEST.Class;apiCall.initialize("Ftp","set_quota");apiCall.addArgument("user",user.username);apiCall.addArgument("domain",user.domain);apiCall.addArgument("quota",user.services.ftp.quota);promise=this.deferred(apiCall).promise;promises.push(promise)}if(user.services.ftp.homedir!==originalService.homedir){apiCall=new APIREQUEST.Class;apiCall.initialize("Ftp","set_homedir");apiCall.addArgument("user",user.username);apiCall.addArgument("domain",user.domain);apiCall.addArgument("homedir",user.services.ftp.homedir);promise=this.deferred(apiCall).promise;promises.push(promise)}if(user.password){apiCall=new APIREQUEST.Class;apiCall.initialize("Ftp","passwd");apiCall.addArgument("user",user.username);apiCall.addArgument("domain",user.domain);apiCall.addArgument("pass",user.password);promise=this.deferred(apiCall).promise;promises.push(promise)}}else if(user.services.webdisk.enabled){if(user.services.webdisk.homedir!==originalService.homedir){apiCall=new APIREQUEST.Class;apiCall.initialize("WebDisk","set_homedir");apiCall.addArgument("user",user.full_username);apiCall.addArgument("homedir",user.services.webdisk.homedir);promise=this.deferred(apiCall).promise;promises.push(promise)}if(user.services.webdisk.perms!==originalService.perms){apiCall=new APIREQUEST.Class;apiCall.initialize("WebDisk","set_permissions");apiCall.addArgument("user",user.full_username);apiCall.addArgument("perms",user.services.webdisk.perms);promise=this.deferred(apiCall).promise;promises.push(promise)}if(user.password){apiCall=new APIREQUEST.Class;apiCall.initialize("WebDisk","set_password");apiCall.addArgument("user",user.full_username);apiCall.addArgument("password",user.password);apiCall.addArgument("enabledigest",user.services.webdisk.enabledigest?1:0);promise=this.deferred(apiCall).promise;promises.push(promise)}if(!user.password&&user.services.webdisk.enabledigest!==originalService.enabledigest){apiCall=new APIREQUEST.Class}}else{promise=$q(function(resolve,reject){reject(LOCALE.maketext("The system detected an unknown service for the “[_1]” service account.",user.full_username))});promises.push(promise)}return $q.all(promises)},prepareList:function(response){if(response.status){return convertResponseToList(response)}else{throw response.errors}},link:function(user,type,forceLink){var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","merge_service_account");apiCall.addArgument("username",user.username);apiCall.addArgument("domain",user.domain);if(type){if(user.services[type].enabled||forceLink){apiCall.addArgument("services."+type+".merge",1)}}else{for(var serviceName in user.services){if(user.services.hasOwnProperty(serviceName)&&user.services[serviceName].enabled){apiCall.addArgument("services."+serviceName+".merge",1)}}}var deferred=this.deferred(apiCall,{transformAPISuccess:function(response){return adjustUser(response.data)}});return deferred.promise},unlink:function(user,serviceType){var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","unlink_service_account");apiCall.addArgument("username",user.username);apiCall.addArgument("domain",user.domain);apiCall.addArgument("service",serviceType);apiCall.addArgument("dismiss",true);var deferred=this.deferred(apiCall,{transformAPISuccess:convertResponseToList});return deferred.promise},linkAll:function(subAccount){var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","merge_service_account");apiCall.addArgument("username",subAccount.username);apiCall.addArgument("domain",subAccount.domain);for(var i=0,l=subAccount.merge_candidates.length;i<l;i++){var serviceAccount=subAccount.merge_candidates[i];for(var serviceName in serviceAccount.services){if(serviceAccount.services.hasOwnProperty(serviceName)&&serviceAccount.services[serviceName].enabled){var arg="services."+serviceName+".merge";apiCall.addArgument(arg,true)}}}var deferred=this.deferred(apiCall,{transformAPISuccess:function(response){return adjustUser(response.data)}});return deferred.promise},dismissLink:function(user){var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","dismiss_merge");apiCall.addArgument("username",user.username);apiCall.addArgument("domain",user.domain);for(var serviceName in user.services){if(user.services.hasOwnProperty(serviceName)&&user.services[serviceName].enabled){var arg="services."+serviceName+".dismiss";apiCall.addArgument(arg,true)}}var deferred=this.deferred(apiCall,{transformAPISuccess:function(response){return response.data}});return deferred.promise},dismissAll:function(subAccount){var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","dismiss_merge");apiCall.addArgument("username",subAccount.username);apiCall.addArgument("domain",subAccount.domain);for(var i=0,l=subAccount.merge_candidates.length;i<l;i++){var serviceAccount=subAccount.merge_candidates[i];for(var serviceName in serviceAccount.services){if(serviceAccount.services.hasOwnProperty(serviceName)&&serviceAccount.services[serviceName].enabled){var arg="services."+serviceName+".dismiss";apiCall.addArgument(arg,true)}}}var deferred=this.deferred(apiCall,{transformAPISuccess:function(response){return response.data}});return deferred.promise},checkAccountConflicts:function(fullUsername){if(lastRequest_jqXHR){lastRequest_jqXHR.abort()}var apiCall=new APIREQUEST.Class;apiCall.initialize("UserManager","check_account_conflicts");apiCall.addArgument("full_username",fullUsername);var deferred=this.deferred(apiCall,{transformAPISuccess:function(response){if(response.data.accounts){response.data.accounts=adjustUser(response.data.accounts);response.data.accounts.candidate_services=consolidateCandidateServices(response.data.accounts,true)}return response.data}});return $q(function(resolve,reject){deferred.promise.then(function(data){if(data.conflict){reject(LOCALE.maketext("The username is not available."))}else{resolve(data)}},function(error){reject(LOCALE.maketext("The system failed to determine whether the username is available: [_1]",error))})})},integrateCandidateServices:function(dest,src){var candidateServices=src&&src.candidate_services||{};var services=dest.services;var self=this;angular.forEach(services,function(service,serviceName){if(candidateServices[serviceName]){services[serviceName]=candidateServices[serviceName]}else if(services[serviceName].isCandidate){services[serviceName]=self.emptyUser().services[serviceName]}});return dest},expandDismissed:function(user,onlyDismissed){var ret=onlyDismissed?[]:[user];if(angular.isArray(user.dismissed_merge_candidates)){return ret.concat(user.dismissed_merge_candidates.map(adjustUser))}else{throw new TypeError("Developer Error: dismissed_merge_candidates must be an array.")}},sendRequest:function(apiCall,handlers,deferred){apiCall=new APIService.AngularAPICall(apiCall,handlers,deferred);lastRequest_jqXHR=apiCall.jqXHR;return apiCall.deferred},addInvitationIssues:function(user){if(user.has_invite){if(user.has_expired_invite){user.issues.unshift({type:"error",title:LOCALE.maketext("Invite Expired")+":",message:LOCALE.maketext("This user did not respond to the invitation before it expired. Please delete and re-create the user to send another invitation or set the user’s password yourself.")})}else{user.issues.unshift({type:"info",title:LOCALE.maketext("Invite Pending")+":",message:LOCALE.maketext("This user has not used the invitation to set a password.")})}}}});return new UserListService}])});
define(["angular","lodash","cjt/util/locale","uiBootstrap","cjt/directives/alertList","cjt/services/alertService","cjt/directives/disableAnimations","cjt/directives/toggleSortDirective","cjt/directives/validationItemDirective","cjt/directives/spinnerDirective","cjt/directives/autoFocus","cjt/directives/lastItem","cjt/filters/wrapFilter","cjt/filters/breakFilter","cjt/services/dataCacheService","app/directives/issueList","app/directives/modelToLowerCase","app/services/userService"],function(angular,_,LOCALE){var app=angular.module("App");var controller=app.controller("listController",["$scope","$routeParams","$q","$location","$filter","$timeout","userService","spinnerAPI","alertService","wrapFilter","dataCache","features","quotaInfo",function($scope,$routeParams,$q,$location,$filter,$timeout,userService,spinnerAPI,alertService,wrapFilter,dataCache,features,quotaInfo){var _initializeScope=function(){$scope.showAdvancedSettings=false;$scope.alerts=alertService.getAlerts();$scope.isOverQuota=!quotaInfo.under_quota_overall;$scope.openConfirmation=null;$scope.advancedFilters={services:"all",issues:"both",showLinkable:true};$scope.hasFeature=PAGE.hasFeature;if(!$scope.hasFeature){return}$scope.userList=[];$scope.filteredUserList=[];$scope.totalItems=0;$scope.meta={sortDirection:$routeParams.sortDirection||"asc",sortBy:$routeParams.sortBy||"full_username",sortType:$routeParams.sortType,pageSize:$routeParams.pageSize||50,pageNumber:$routeParams.pageNumber||1,pageSizes:[10,50,100,200]};$scope.features=features;$scope.filteredTotalItems=0;$scope.filteredUsers=[]};var _initializeView=function(){var results;if($scope.isOverQuota){alertService.clear();alertService.add({message:LOCALE.maketext("Your [asis,cPanel] account exceeds its disk quota. You cannot add or edit users."),type:"danger",id:"over-quota-warning",replace:false,counter:false})}if(app.firstLoad.userList&&PAGE.userList){app.firstLoad.userList=false;try{results=userService.prepareList(PAGE.userList);PAGE.userList=null;dataCache.set("userList",results.items);$scope.userList=dataCache.get("userList");$scope.totalItems=$scope.userList.length}catch(e){alertService.clear();var errors=e;if(!angular.isArray(errors)){errors=[errors]}errors.forEach(function(error){alertService.add({type:"danger",message:error.toString(),id:"fetchError"})})}}else{if($location.search().loadFromCache&&($scope.userList=dataCache.get("userList"))){$scope.totalItems=$scope.userList.length;$scope.filteredTotalItems=$scope.userList.length}else{$scope.fetch(!$scope.advancedFilters.showLinkable)}}$scope.filteredData=false;return $timeout(function(){updateUI(true)},5)};function updateUI(shouldRunFilters){if(!$scope.userList){return}spinnerAPI.start("loadingSpinner");$timeout(function(){$scope.totalItems=$scope.userList.length;var filteredUsers;if(!shouldRunFilters){if($scope.filteredData){filteredUsers=$scope.filteredUsers}else{filteredUsers=$scope.userList}}else{var filterFilter=$filter("filter");filteredUsers=filterFilter($scope.userList,$scope.filterText);filteredUsers=filterFilter(filteredUsers,$scope.filterAdvanced);$scope.filteredData=true}var startIndex=$scope.meta.pageSize*($scope.meta.pageNumber-1);var endIndex=$scope.meta.pageSize*$scope.meta.pageNumber;var lastPage=false;if(endIndex>filteredUsers.length){lastPage=true}$scope.filteredTotalItems=filteredUsers.length;$scope.filteredUsers=filteredUsers;if(filteredUsers.length<$scope.meta.pageSize){$scope.pagedFilteredUser=filteredUsers}else{if(!lastPage){$scope.pagedFilteredUser=filteredUsers.slice(startIndex,endIndex)}else{$scope.pagedFilteredUser=filteredUsers.slice(startIndex)}}var lastPageTotalItems=$scope.pageTotalItems;$scope.pageTotalItems=filteredUsers.length;if($scope.pageTotalItems===0||lastPageTotalItems===filteredUsers.length){spinnerAPI.stop("loadingSpinner")}$scope.hideViewLoadingPanel()},5)}$scope.doneRendering=function(user){spinnerAPI.stop("loadingSpinner")};$scope.edit=function(user){if($scope.isOverQuota){return false}if(user.type==="sub"){$scope.loadView("edit/subaccount/"+user.guid,{},{clearAlerts:true})}else if(user.type==="service"){var serviceType;if(user.services.email&&user.services.email.enabled){serviceType="email"}else if(user.services.ftp&&user.services.ftp.enabled){serviceType="ftp"}else if(user.services.webdisk&&user.services.webdisk.enabled){serviceType="webdisk"}else{alertService.clear();alertService.add({type:"danger",message:LOCALE.maketext("The service account is invalid."),id:"errorServiceAccountNotValid"});return}$scope.loadView("edit/service/"+serviceType+"/"+user.full_username,{},{clearAlerts:true})}else{alertService.clear();alertService.add({type:"danger",message:LOCALE.maketext("You cannot edit the account."),id:"errorAccountNotValid"});return}};$scope.filterText=function(user){if(!$scope.meta.filterValue){return true}return["full_username","real_name","alternate_email","type","typeLabel","serviceSearch"].some(function(key){var propVal=user[key];if(propVal&&propVal.toLocaleLowerCase().indexOf($scope.meta.filterValue)!==-1){return true}})};$scope.hasAdvancedSearch=function(){if($scope.advancedFilters.services!=="all"||$scope.advancedFilters.issues!=="both"){return true}else{return false}};$scope.filterAdvanced=function(user){var areMergeCandidatesVisible=function(user){var list=user.merge_candidates;if($scope.meta.filterValue){list=$filter("filter")(list,$scope.filterText)}list=$filter("filter")(list,$scope.filterAdvanced);return!!list.length};if($scope.advancedFilters.issues==="noissues"){switch(user.type){case"hypothetical":if(!areMergeCandidatesVisible(user)){return false}else if(user.candidate_issues_count===user.merge_candidates.length){return false}break;case"sub":if(user.issues.length>0||user.has_expired_invite||areMergeCandidatesVisible(user)&&user.candidate_issues_count){return false}break;default:if(user.issues.length>0){return false}}}if($scope.advancedFilters.issues==="issues"){switch(user.type){case"hypothetical":if(!areMergeCandidatesVisible(user)){return false}else if(!user.candidate_issues_count){return false}break;case"sub":if(user.issues.length===0&&!user.has_expired_invite&&(!areMergeCandidatesVisible(user)||!user.candidate_issues_count)){return false}break;default:if(user.issues.length===0){return false}}}if($scope.advancedFilters.services==="all"){return true}if($scope.advancedFilters.services==="email"&&(user.services.email.enabled||user.services.email.enabledInCandidate)){return true}if($scope.advancedFilters.services==="ftp"&&(user.services.ftp.enabled||user.services.ftp.enabledInCandidate)){return true}if($scope.advancedFilters.services==="webdisk"&&(user.services.webdisk.enabled||user.services.webdisk.enabledInCandidate)){return true}return false};$scope.sortList=function(meta,defaultSort){$scope.selectedRow=-1;if(!defaultSort){var flat=!$scope.advancedFilters.showLinkable;$scope.fetch(flat)}};$scope.triggerClearSearch=function(event){if(event.keyCode===27){$scope.clearSearch()}};$scope.clearSearch=function(){$scope.meta.filterValue=""};$scope.fetch=function(){$scope.filteredUsers=[];$scope.filteredData=false;$scope.showViewLoadingPanel();var flat=!$scope.advancedFilters.showLinkable;spinnerAPI.start("loadingSpinner");return userService.fetchList(flat,$scope.meta).then(function(results){dataCache.set("userList",results.items);$scope.userList=dataCache.get("userList");$scope.totalItems=$scope.userList.length;$scope.pageNumber=1;updateUI(true)},function(error){alertService.add({type:"danger",message:error,id:"fetchError"})}).finally(function(){spinnerAPI.stop("loadingSpinner")})};$scope.showDeleteConfirm=function(user){user.ui.showDeleteConfirm=true};$scope.hideDeleteConfirm=function(user){user.ui.showDeleteConfirm=false};$scope.canShowDeleteConfirm=function(user){return user.ui.showDeleteConfirm};$scope.isDeleting=function(user){return user.ui.deleting};$scope.deleteUser=function(user,parent){spinnerAPI.start("loadingSpinner");user.ui.deleting=true;return userService.delete(user).then(function(results){var collection=parent?parent.merge_candidates:$scope.userList;var pos=collection.indexOf(user);if(pos!==-1){if(results.data){collection.splice(pos,1,results.data)}else{collection.splice(pos,1);if(parent&&parent.type==="hypothetical"&&parent.merge_candidates.length===1){var parentPos=$scope.userList.indexOf(parent);if(parentPos!==-1){$scope.userList.splice(parentPos,1,parent.merge_candidates.pop())}}}dataCache.set("userList",$scope.userList);updateUI(true)}},function(error){alertService.add({type:"danger",message:error,id:"deleteError"})}).finally(function(){user.ui.deleting=false;spinnerAPI.stop("loadingSpinner")})};$scope.wrappedDeleteText=function(user){var wbrText=wrapFilter(user.full_username,"[@.]",5);return LOCALE.maketext("Do you wish to remove the “[_1]” user from your system?",wbrText)};$scope.linkUser=function(user,parent){spinnerAPI.start("loadingSpinner");user.ui.linking=true;_buildLinkingCaches(user,parent);return userService.link(user).then(function(results){var collection=$scope.userList;var pos=collection.indexOf(parent);if(pos!==-1){collection.splice(pos,1,results);dataCache.set("userList",collection);updateUI(true);alertService.add({type:"success",message:results.synced_password?LOCALE.maketext("The system successfully linked the service account to the “[_1]” user’s [asis,subaccount]. The service account passwords have not changed.",results.full_username):LOCALE.maketext("The system successfully linked the service account to the “[_1]” user’s [asis,subaccount]. The service account passwords did not change. You must provide a new password if you wish to enable any additional [asis,subaccount] services.",results.full_username),id:"link-user-success",replace:false})}},function(error){alertService.add({type:"danger",message:error,id:"linkError"})}).finally(function(){spinnerAPI.stop("loadingSpinner");user.ui.linking=false;_buildLinkingCaches(user,parent)})};$scope.dismissLink=function(user,parent){spinnerAPI.start("loadingSpinner");user.ui.linking=true;_buildLinkingCaches(user,parent);return userService.dismissLink(user).then(function(results){var collection=$scope.userList;var pos=collection.indexOf(parent);var mergeCandidatePosition=collection[pos].merge_candidates.indexOf(user);if(mergeCandidatePosition!==-1){var formerMergeCandidate=collection[pos].merge_candidates[mergeCandidatePosition];collection[pos].merge_candidates.splice(mergeCandidatePosition,1);_insert(collection,formerMergeCandidate);if("hypothetical"===collection[pos].type&&collection[pos].merge_candidates.length===1){var finalMergeCandidate=collection[pos].merge_candidates.pop();_insert(collection,finalMergeCandidate);collection.splice(pos,1)}dataCache.set("userList",collection);updateUI(true)}},function(error){alertService.add({type:"danger",message:error,id:"dismissError"})}).finally(function(){spinnerAPI.stop("loadingSpinner");user.ui.linking=false;_buildLinkingCaches(user,parent)})};var _insert=function(collection,newUser){for(var i=0,l=collection.length;i<l;i++){var user=collection[i];if(user.full_username>newUser.full_username){collection.splice(i,0,newUser);return}}collection.push(newUser)};$scope.linkAll=function(parent){spinnerAPI.start("loadingSpinner");parent.ui.linkingAny=parent.ui.linkingAll=true;return userService.linkAll(parent).then(function(results){var collection=$scope.userList;var pos=collection.indexOf(parent);if(pos!==-1){collection.splice(pos,1,results);dataCache.set("userList",collection);updateUI(true)}alertService.add({type:"success",message:results.synced_password?LOCALE.maketext("The system successfully linked all of the service accounts for the “[_1]” user to the [asis,subaccount]. The service account passwords did not change.",results.full_username):LOCALE.maketext("The system successfully linked all of the service accounts for the “[_1]” user to the [asis,subaccount]. The service account passwords did not change. You must provide a new password if you wish to enable any additional [asis,subaccount] services.",results.full_username),id:"link-all-success",replace:false})},function(error){alertService.add({type:"danger",message:error,id:"dismissError"})}).finally(function(){spinnerAPI.stop("loadingSpinner");parent.ui.linkingAny=parent.ui.linkingAll=false})};$scope.dismissAll=function(parent){spinnerAPI.start("loadingSpinner");parent.ui.linkingAny=parent.ui.linkingAll=true;return userService.dismissAll(parent).then(function(results){var collection=$scope.userList;var pos=collection.indexOf(parent);if(pos!==-1){var serviceAccount=collection[pos].merge_candidates.shift();while(serviceAccount){_insert(collection,serviceAccount);serviceAccount=collection[pos].merge_candidates.shift()}if("hypothetical"===parent.type){collection.splice(pos,1)}dataCache.set("userList",collection);updateUI(true)}},function(error){alertService.add({type:"danger",message:error,id:"linkError"})}).finally(function(){spinnerAPI.stop("loadingSpinner");parent.ui.linkingAny=parent.ui.linkingAll=false})};var _buildLinkingCaches=function(user,parent){parent.ui.linkingAll=true;parent.ui.linkingAny=false;for(var i=0,l=parent.merge_candidates.length;i<l;i++){if(parent.merge_candidates[i].ui.linking){parent.ui.linkingAny=true}else{parent.ui.linkingAll=false}}};_initializeScope();_initializeView().finally(function(){$scope.$watchGroup(["meta.filterValue","advancedFilters.services","advancedFilters.issues"],function(newVals,oldVals){updateUI(true)});$scope.$watchGroup(["meta.pageSize","meta.pageNumber"],function(newVals,oldVals){updateUI()})})}]);return controller});
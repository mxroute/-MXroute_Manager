define(["angular","lodash","cjt/util/locale","app/views/addEditController","cjt/directives/alertList","cjt/directives/toggleLabelInfoDirective","cjt/directives/toggleSwitchDirective","cjt/services/alertService","cjt/directives/spinnerDirective","app/directives/issueList","app/services/userService","cjt/services/dataCacheService"],function(angular,_,LOCALE,baseCtrlFactory){var app=angular.module("App");var controller=app.controller("editController",["$scope","$route","$routeParams","$timeout","$location","$anchorScroll","userService","alertService","spinnerAPI","dataCache","defaultInfo","quotaInfo","emailDaemonInfo","ftpDaemonInfo","webdiskDaemonInfo","features",function($scope,$route,$routeParams,$timeout,$location,$anchorScroll,userService,alertService,spinnerAPI,dataCache,defaultInfo,quotaInfo,emailDaemonInfo,ftpDaemonInfo,webdiskDaemonInfo,features){var baseCtrl=baseCtrlFactory($scope,userService,emailDaemonInfo,ftpDaemonInfo,webdiskDaemonInfo,features,defaultInfo,quotaInfo,alertService);var initializeScope=function(){baseCtrl.initializeScope()};var initializeView=function(){baseCtrl.initializeView()};initializeScope();initializeView();$scope.toggleService=function(service){service.enabled=!service.enabled};function updateUser(user){spinnerAPI.start("loadingSpinner");$scope.ui.isSaving=true;return userService.edit(user).then(function(user){var cachedUserList=dataCache.get("userList");var loadFromCache=false;if(cachedUserList){$scope.insertSubAndRemoveDupes(user,cachedUserList);dataCache.set("userList",cachedUserList);loadFromCache=true}spinnerAPI.stop("loadingSpinner");$scope.ui.isSaving=false;$scope.loadView("list/rows",{loadFromCache:loadFromCache});alertService.add({type:"success",message:LOCALE.maketext("The system successfully updated the following user: [_1]",user.full_username),id:"updateUserSuccess",autoClose:1e4})},function(error){error=error.error||error;alertService.clear();alertService.add({type:"danger",message:LOCALE.maketext("The system failed to update the “[_1]” user with the following error: [_2]",user.full_username,error),id:"updateFailedErrorServer"});spinnerAPI.stop("loadingSpinner");$scope.ui.isSaving=false;$anchorScroll("top")})}function updateService(user){spinnerAPI.start("loadingSpinner");$scope.ui.isSaving=true;if(!$scope.canPromote(user)){return userService.editService(user,$scope.ui.originalService).then(function(){$scope.loadView("list/rows",{loadFromCache:false});alertService.add({type:"success",message:LOCALE.maketext("The system successfully modified the service account: [_1]",user.full_username),id:"updateServiceSuccess",autoClose:1e4})}).catch(function(error){alertService.add({type:"danger",message:LOCALE.maketext("The system failed to modify the service account for “[_1]”: [_2]",user.full_username,error),id:"updateServiceFailed"});$anchorScroll("top")}).finally(function(){spinnerAPI.stop("loadingSpinner");$scope.ui.isSaving=false})}else{return userService.link(user,$scope.ui.originalServiceType,true).then(function(sub){var cachedUserList=dataCache.get("userList");$scope.insertSubAndRemoveDupes(user,cachedUserList);dataCache.set("userList",cachedUserList);user.type="sub";user.guid=sub.guid;return updateUser(user)},function(error){alertService.clear();alertService.add({type:"danger",message:LOCALE.maketext("The system failed to upgrade the “[_1]” service account to a [asis,subaccount] with the following error: [_2]",user.full_username,error),id:"updateFailedErrorServer"});$anchorScroll("top")}).finally(function(){spinnerAPI.stop("loadingSpinner");$scope.ui.isSaving=false})}}$scope.update=function(user){$anchorScroll("btn-save");switch($scope.mode){case"subaccount":return updateUser(user);case"service":return updateService(user);default:alertService.clear();alertService.add({type:"danger",message:LOCALE.maketext("The system did not recognize the update mode: [_1]",$scope.mode),id:"updateUnrecognizedMode"});return}};$scope.isInProgress=function(){return $scope.ui.isSaving||$scope.ui.isLoading};$scope.unlinkService=function(user,serviceType){spinnerAPI.start("loadingSpinner");$scope.ui.isSaving=true;return userService.unlink(user,serviceType).then(function(){dataCache.remove("userList");return loadSubuser(user.guid).then(function(){spinnerAPI.stop("loadingSpinner");$scope.ui.isSaving=false;alertService.add({type:"success",message:LOCALE.maketext("The system successfully unlinked the “[_1]” service.",serviceType),id:"unlinkServiceSuccess",autoClose:1e4})})},function(error){alertService.clear();alertService.add({type:"danger",message:LOCALE.maketext("The system failed to unlink the “[_1]” service with the following error: [_2]",serviceType,error),id:"unlinkServiceFailed"});spinnerAPI.stop("loadingSpinner");$scope.ui.isSaving=false;$anchorScroll("top")})};$scope.isAllowed=function(user,service){return $scope.canPromote(user)||service.enabled};function _needsPassword(user,originalService){if(user.type==="service"&&(originalService.enabled===false||originalService.enabledigest===false)||user.type==="sub"&&(originalService.enabled===false||originalService.enabledigest===false)){return true}else{return false}}$scope.canEnableDigest=function(user){if(_needsPassword(user,$scope.ui.originalServices["webdisk"])){return user.password?true:false}else{return true}};$scope.showDigestRequiresPasswordWarning=function(user){return _needsPassword(user,$scope.ui.originalServices["webdisk"])&&user.services["webdisk"].enabled};$scope.showUnlink=function(user,serviceType){return!user.synced_password&&!user.services[serviceType].isNew&&!user.services[serviceType].isCandidate};$scope.canPromote=function(user){if(user.type==="sub"){return true}else if(user.type==="service"){if(user.has_siblings||user.sub_account_exists){return false}else{return true}}};$scope.$watch("ui.user.services.ftp.homedir",function(){if(!$scope.ui.user.services.ftp.homedir&&$scope.form.txtFtpHomeDirectory&&!$scope.form.txtFtpHomeDirectory.$pristine){$scope.form.txtFtpHomeDirectory.$setViewValue("/")}});$scope.$watch("ui.user.services.webdisk.homedir",function(){if(!$scope.ui.user.services.webdisk.homedir&&$scope.form.txtWebDiskHomeDirectory&&!$scope.form.txtWebDiskHomeDirectory.$pristine){$scope.form.txtWebDiskHomeDirectory.$setViewValue("/")}});$scope.$watch("ui.user.password",function(value){if(value===""&&!$scope.canAddServices($scope.ui.user)){["email","ftp","webdisk"].forEach(function(name){$scope.ui.user.services[name].enabled=$scope.ui.originalServices[name].enabled})}});$scope.canAddServices=function(user){if(user.synced_password){return true}else{return!!user.password}};function loadSubuser(guid){if(!guid){alertService.clear();alertService.add({type:"warn",message:LOCALE.maketext("You did not select a [asis,subaccount]."),id:"missingUserWarning"});$scope.loadView("list/rows",{loadFromCache:true})}else{$scope.ui.isLoading=true;$scope.ui.user=null;spinnerAPI.start("loadingSpinner");$scope.ui.user=userService.emptyUser();return userService.fetchUser($routeParams.guid).then(function(user){$scope.ui.user=user;$scope.ui.originalServices=_.cloneDeep(user.services);$scope.useCandidateServices(user,user);userService.addInvitationIssues(user);spinnerAPI.stop("loadingSpinner");$scope.ui.isLoading=false},function(error){alertService.clear();alertService.add({type:"warn",message:LOCALE.maketext("The system could not load the [asis,subaccount] with the following error: [_1]",error),id:"missingUserWarning"});$scope.loadView("list/rows",{loadFromCache:true})})}}function loadService(type,fullUsername){if(!type||!fullUsername){alertService.clear();alertService.add({type:"warn",message:LOCALE.maketext("You did not select a valid service account."),id:"missingUserWarning"});$scope.loadView("list/rows",{loadFromCache:true})}else{$scope.ui.isLoading=true;$scope.ui.user=null;spinnerAPI.start("loadingSpinner");$scope.ui.user=userService.emptyUser();return userService.fetchService(type,fullUsername).then(function(user){$scope.ui.user=user;$scope.ui.originalService=_.cloneDeep(user.services[type]);$scope.ui.originalServiceType=type;$scope.ui.originalServices=_.cloneDeep(user.services);$scope.ui.user.synced_password=true;spinnerAPI.stop("loadingSpinner");$scope.ui.isLoading=false},function(error){alertService.clear();alertService.add({type:"warn",message:LOCALE.maketext("The system could not load the service account with the following error: [_1]",error),id:"missingServiceWarning"});$scope.loadView("list/rows",{loadFromCache:true})}).finally(function(){if($scope.ui.user&&!$scope.canPromote($scope.ui.user)){alertService.add({type:"warn",message:LOCALE.maketext("The system cannot upgrade this service account to a [asis,subaccount]. To access all the features within this interface, you must delete any accounts that share the same username or link this service account to a [asis,subaccount]."),id:"cannotPromoteWarning"})}})}}function showUnsyncedPasswordWarning(){if(!$scope.ui.user.synced_password){alertService.add({type:"warn",message:LOCALE.maketext("You cannot enable additional services for this [asis,subaccount] until you set its password. When you set the password, all of your services will utilize the same password."),id:"unsyncedPasswordWarning",replace:false,counter:false})}}$scope.linkServices=function(user){spinnerAPI.start("loadingSpinner");$scope.ui.isSaving=true;return userService.linkAndDismiss(user).then(function(result){var cachedUserList=dataCache.get("userList");if(cachedUserList){$scope.insertSubAndRemoveDupes(result,cachedUserList);dataCache.set("userList",cachedUserList)}$scope.ui.user.synced_password=result.synced_password;result.linked_services.forEach(function(serviceName){$scope.ui.user.services[serviceName]=result.services[serviceName];$scope.ui.originalServices[serviceName]=_.cloneDeep(result.services[serviceName])});alertService.add({type:"success",message:result.synced_password?LOCALE.maketext("The system successfully linked the service account to the “[_1]” user’s [asis,subaccount]. The service account passwords have not changed.",result.full_username):LOCALE.maketext("The system successfully linked the service account to the “[_1]” user’s [asis,subaccount]. The service account passwords have not changed. You must provide a new password if you enable any additional [asis,subaccount] services.",result.full_username),id:"link-user-success",replace:false})}).catch(function(error){alertService.add({type:"danger",message:error.error?error.error:error,id:error.call==="link"?"link-error":"link-and-dismiss-error"});$anchorScroll("top")}).finally(function(){$scope.ui.isSaving=false;spinnerAPI.stop("loadingSpinner")})};if(/^\/edit\/subaccount/.test($route.current.originalPath)){$scope.mode="subaccount";loadSubuser($routeParams.guid).finally(showUnsyncedPasswordWarning)}else if(/^\/edit\/service/.test($route.current.originalPath)){$scope.mode="service";loadService($routeParams.type,$routeParams.user).finally(showUnsyncedPasswordWarning)}}]);return controller});